"use strict";(self.webpackChunkailinykh_com=self.webpackChunkailinykh_com||[]).push([[7250],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),u=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),f=u(n),m=o,d=f["".concat(l,".").concat(m)]||f[m]||p[m]||a;return n?r.createElement(d,s(s({ref:t},c),{},{components:n})):r.createElement(d,s({ref:t},c))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,s=new Array(a);s[0]=f;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:o,s[1]=i;for(var u=2;u<a;u++)s[u]=n[u];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},9427:function(e,t,n){n.r(t),n.d(t,{assets:function(){return l},contentTitle:function(){return s},default:function(){return p},frontMatter:function(){return a},metadata:function(){return i},toc:function(){return u}});var r=n(3117),o=(n(7294),n(3905));const a={slug:"network-testing-with-url-protocol-stubbing",title:"Testing netwok requests with URLProtocol stubs",author:"Anton Ilinykh",author_image_url:"https://avatars.githubusercontent.com/u/939390?s=400&v=4",tags:["swift","URLProtocol","testing","networking","ios"]},s=void 0,i={permalink:"/network-testing-with-url-protocol-stubbing",editUrl:"https://github.com/ailinykh/blog/edit/master/blog/2021-02-27-network-testing-with-url-protocol-stubbing.md",source:"@site/blog/2021-02-27-network-testing-with-url-protocol-stubbing.md",title:"Testing netwok requests with URLProtocol stubs",description:"Apple has a powerful URL Loading System which can be used in various ways with a bunch of most common URL schemes. It also includes the URLProtocol, a class that can intercept all network requests for different purposes. You can use it for analytics, testing, and even profiling your application.",date:"2021-02-27T00:00:00.000Z",formattedDate:"February 27, 2021",tags:[{label:"swift",permalink:"/tags/swift"},{label:"URLProtocol",permalink:"/tags/url-protocol"},{label:"testing",permalink:"/tags/testing"},{label:"networking",permalink:"/tags/networking"},{label:"ios",permalink:"/tags/ios"}],readingTime:1.5,hasTruncateMarker:!0,authors:[{name:"Anton Ilinykh",imageURL:"https://avatars.githubusercontent.com/u/939390?s=400&v=4"}],frontMatter:{slug:"network-testing-with-url-protocol-stubbing",title:"Testing netwok requests with URLProtocol stubs",author:"Anton Ilinykh",author_image_url:"https://avatars.githubusercontent.com/u/939390?s=400&v=4",tags:["swift","URLProtocol","testing","networking","ios"]},prevItem:{title:"Homebrew package version downgrade",permalink:"/homebrew-formula-downgrade"},nextItem:{title:"Dependency Inversion Principle",permalink:"/dependency-inversion-principle"}},l={authorsImageUrls:[void 0]},u=[],c={toc:u};function p(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Apple has a powerful ",(0,o.kt)("a",{parentName:"p",href:"https://developer.apple.com/documentation/foundation/url_loading_system"},"URL Loading System")," which can be used in various ways with a bunch of most common URL schemes. It also includes the ",(0,o.kt)("a",{parentName:"p",href:"https://developer.apple.com/documentation/foundation/urlprotocol"},"URLProtocol"),", a class that can intercept all network requests for different purposes. You can use it for analytics, testing, and even profiling your application."),(0,o.kt)("p",null,"All you need to do is to subclass the ",(0,o.kt)("inlineCode",{parentName:"p"},"URLProtocol")," and override nessesary methods."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-swift"},'class URLProtocolStub: URLProtocol {\n    override class func canInit(with request: URLRequest) -> Bool {\n        guard let url = request.url, let host = url.host else { return false }\n            \n        return host.hasSuffix("example.com")\n    }\n\n    override class func canonicalRequest(for request: URLRequest) -> URLRequest {\n        return request\n    }\n}\n')),(0,o.kt)("p",null,"After that you have to register it ",(0,o.kt)("strong",{parentName:"p"},"before")," any network request were made and also unregister if needed:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-swift"},"override func setUp() {\n    super.setUp()\n    \n    URLProtocol.registerClass(URLProtocolStub.self)\n}\n\noverride func tearDown() {\n    super.tearDown()\n    \n    URLProtocol.unregisterClass(URLProtocolStub.self)\n}\n")),(0,o.kt)("p",null,"And from now you can decide how to handle every single network request made within your application. "),(0,o.kt)("p",null,"For example you can stub a response before any paticular request will be executed and response immediately."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-swift"},"class URLProtocolStub: URLProtocol {\n    enum URLResponseStub {\n        case failure(Error)\n        case success(Data)\n    }\n    \n    static var stubs = [URL: URLResponseStub]()\n    \n    override func startLoading() {\n        guard let url = request.url, let stub = URLProtocolStub.stubs[url] else { return }\n        \n        switch stub {\n        case .failure(let error):\n            client?.urlProtocol(self, didFailWithError: error)\n        case .success(let data):\n            client?.urlProtocol(self, didLoad: data)\n        }\n    }\n    override func stopLoading() {}\n}\n")),(0,o.kt)("admonition",{type:"caution"},(0,o.kt)("p",{parentName:"admonition"},"You have to implement ",(0,o.kt)("inlineCode",{parentName:"p"},"stopLoading")," method even if you don't need it")),(0,o.kt)("p",null,"This approach gives you ability to mock any response you want just writing a fiew lines of code."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-swift"},'let url = URL(string: "https://example.com")!\nlet error = NSError(domain: "", code: 0)\nURLProtocolStub.stubs[url] = .failure(error)\n')),(0,o.kt)("p",null,"Just make sure that the whole mock stuff happens before the actual network requests."))}p.isMDXComponent=!0}}]);