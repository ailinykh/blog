"use strict";(self.webpackChunkailinykh_com=self.webpackChunkailinykh_com||[]).push([[892],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return f}});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=r.createContext({}),l=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},p=function(e){var n=l(e.components);return r.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),d=l(t),f=i,m=d["".concat(s,".").concat(f)]||d[f]||u[f]||o;return t?r.createElement(m,a(a({ref:n},p),{},{components:t})):r.createElement(m,a({ref:n},p))}));function f(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,a=new Array(o);a[0]=d;var c={};for(var s in n)hasOwnProperty.call(n,s)&&(c[s]=n[s]);c.originalType=e,c.mdxType="string"==typeof e?e:i,a[1]=c;for(var l=2;l<o;l++)a[l]=t[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},2315:function(e,n,t){t.r(n),t.d(n,{assets:function(){return s},contentTitle:function(){return a},default:function(){return u},frontMatter:function(){return o},metadata:function(){return c},toc:function(){return l}});var r=t(3117),i=(t(7294),t(3905));const o={slug:"dependency-inversion-principle",title:"Dependency Inversion Principle",author:"Anton Ilinykh",author_image_url:"https://avatars.githubusercontent.com/u/939390?s=400&v=4",tags:["swift","SOLID","dependency inversion","architecture","ios"]},a=void 0,c={permalink:"/dependency-inversion-principle",editUrl:"https://github.com/ailinykh/blog/edit/master/blog/2021-02-16-dependency-inversion-principle.md",source:"@site/blog/2021-02-16-dependency-inversion-principle.md",title:"Dependency Inversion Principle",description:"The Dependency Inversion Principle is the last one from SOLID stands for decoupling the system into independent modules. It means that one part of a system should not depend on another one directly.",date:"2021-02-16T00:00:00.000Z",formattedDate:"February 16, 2021",tags:[{label:"swift",permalink:"/tags/swift"},{label:"SOLID",permalink:"/tags/solid"},{label:"dependency inversion",permalink:"/tags/dependency-inversion"},{label:"architecture",permalink:"/tags/architecture"},{label:"ios",permalink:"/tags/ios"}],readingTime:1.85,hasTruncateMarker:!0,authors:[{name:"Anton Ilinykh",imageURL:"https://avatars.githubusercontent.com/u/939390?s=400&v=4"}],frontMatter:{slug:"dependency-inversion-principle",title:"Dependency Inversion Principle",author:"Anton Ilinykh",author_image_url:"https://avatars.githubusercontent.com/u/939390?s=400&v=4",tags:["swift","SOLID","dependency inversion","architecture","ios"]},prevItem:{title:"Testing netwok requests with URLProtocol stubs",permalink:"/network-testing-with-url-protocol-stubbing"}},s={authorsImageUrls:[void 0]},l=[],p={toc:l};function u(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"The Dependency Inversion Principle is the last one from ",(0,i.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/SOLID"},"SOLID")," stands for decoupling the system into independent modules. It means that one part of a system should not depend on another one directly."),(0,i.kt)("p",null,"Let's see an example."))}u.isMDXComponent=!0}}]);