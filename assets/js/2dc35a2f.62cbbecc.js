"use strict";(self.webpackChunkailinykh_com=self.webpackChunkailinykh_com||[]).push([[251],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return m}});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=r.createContext({}),p=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},c=function(e){var n=p(e.components);return r.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=p(t),m=o,h=d["".concat(s,".").concat(m)]||d[m]||u[m]||i;return t?r.createElement(h,a(a({ref:n},c),{},{components:t})):r.createElement(h,a({ref:n},c))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,a=new Array(i);a[0]=d;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,a[1]=l;for(var p=2;p<i;p++)a[p]=t[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},2859:function(e,n,t){t.r(n),t.d(n,{assets:function(){return s},contentTitle:function(){return a},default:function(){return u},frontMatter:function(){return i},metadata:function(){return l},toc:function(){return p}});var r=t(3117),o=(t(7294),t(3905));const i={slug:"dependency-inversion-principle",title:"Dependency Inversion Principle",author:"Anton Ilinykh",author_image_url:"https://avatars.githubusercontent.com/u/939390?s=400&v=4",tags:["swift","SOLID","dependency inversion","architecture","ios"]},a=void 0,l={permalink:"/dependency-inversion-principle",editUrl:"https://github.com/ailinykh/blog/edit/master/blog/2021-02-16-dependency-inversion-principle.md",source:"@site/blog/2021-02-16-dependency-inversion-principle.md",title:"Dependency Inversion Principle",description:"The Dependency Inversion Principle is the last one from SOLID stands for decoupling the system into independent modules. It means that one part of a system should not depend on another one directly.",date:"2021-02-16T00:00:00.000Z",formattedDate:"February 16, 2021",tags:[{label:"swift",permalink:"/tags/swift"},{label:"SOLID",permalink:"/tags/solid"},{label:"dependency inversion",permalink:"/tags/dependency-inversion"},{label:"architecture",permalink:"/tags/architecture"},{label:"ios",permalink:"/tags/ios"}],readingTime:2.16,hasTruncateMarker:!0,authors:[{name:"Anton Ilinykh",imageURL:"https://avatars.githubusercontent.com/u/939390?s=400&v=4"}],frontMatter:{slug:"dependency-inversion-principle",title:"Dependency Inversion Principle",author:"Anton Ilinykh",author_image_url:"https://avatars.githubusercontent.com/u/939390?s=400&v=4",tags:["swift","SOLID","dependency inversion","architecture","ios"]},prevItem:{title:"Testing netwok requests with URLProtocol stubs",permalink:"/network-testing-with-url-protocol-stubbing"}},s={authorsImageUrls:[void 0]},p=[{value:"Solution",id:"solution",level:2}],c={toc:p};function u(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"The Dependency Inversion Principle is the last one from ",(0,o.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/SOLID"},"SOLID")," stands for decoupling the system into independent modules. It means that one part of a system should not depend on another one directly."),(0,o.kt)("p",null,"Let's see an example."),(0,o.kt)("p",null,"On the one hand, we have a ",(0,o.kt)("inlineCode",{parentName:"p"},"ViewController")," which is the part of ",(0,o.kt)("em",{parentName:"p"},"UI/Presentation Module"),", and on the other hand, we have some data source which can be a part of ",(0,o.kt)("em",{parentName:"p"},"Networking/Persistence Module"),". Let's say it is an ",(0,o.kt)("inlineCode",{parentName:"p"},"URLSession")," object."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-swift"},"class ViewController: UIViewController {\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n\n        URLSession.shared.dataTask(with: url) { data, response, error in\n            // Do something with response\n        }.resume()\n    }\n\n}\n")),(0,o.kt)("br",null),(0,o.kt)("p",null,"This code can be represented by a diagram"),(0,o.kt)("div",{style:{textAlign:"center"}},(0,o.kt)("mermaid",{value:"flowchart LR\n    ViewController --\x3e URLSession\n\n    subgraph UI Module\n        ViewController\n    end\n\n    subgraph Networking Module\n        URLSession\n    end\n"})),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"UIViewController")," depends on ",(0,o.kt)("inlineCode",{parentName:"p"},"URLSession")," concrete implementation. And it means that ",(0,o.kt)("inlineCode",{parentName:"p"},"URLSession")," ",(0,o.kt)("strong",{parentName:"p"},"can't")," be replaced with another ",(0,o.kt)("em",{parentName:"p"},"Network")," client such as ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/Alamofire/Alamofire"},"Alamofire")," without changing the ",(0,o.kt)("em",{parentName:"p"},"Presentation Module"),"."),(0,o.kt)("h2",{id:"solution"},"Solution"),(0,o.kt)("p",null,"This problem can be solved with Dependency Inversion just by adding another abstraction between concrete implementations. Some ",(0,o.kt)("inlineCode",{parentName:"p"},"protocol")," that can live in ",(0,o.kt)("em",{parentName:"p"},"Presentation Module")," and the ",(0,o.kt)("em",{parentName:"p"},"Network Module")," can conform to it."),(0,o.kt)("div",{style:{textAlign:"center"}},(0,o.kt)("mermaid",{value:'flowchart LR\n    ViewController --\x3e HTTPClient["&lt;HTTPClient&gt;"]\n    URLSession -.-> HTTPClient\n\n    subgraph UI Module\n        ViewController\n        HTTPClient\n    end\n\n    subgraph Networking Module\n        URLSession\n    end\n'})),(0,o.kt)("p",null,"and the code above will transform to"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-swift"},"protocol HTTPClient {\n    func load(url: URL, completion: @escaping (Data?, URLResponse?, Error?) -> Void)\n}\n\nclass ViewController: UIViewController {\n\n    var client: HTTPClient!\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n\n        client.load(url: url) { (data, response, error) in\n            // Do something\n        }\n    }\n}\n")),(0,o.kt)("p",null,"Now you can have two separate implementations of ",(0,o.kt)("inlineCode",{parentName:"p"},"HTTPClient")," protocol, and they both can live in ",(0,o.kt)("em",{parentName:"p"},"Network Module")),(0,o.kt)("div",{style:{textAlign:"center"}},(0,o.kt)("mermaid",{value:'flowchart LR\n    ViewController --\x3e HTTPClient["&lt;HTTPClient&gt;"]\n    HTTPURLSession --\x3e URLSession\n    HTTPAlamofire --\x3e Alamofire\n    HTTPURLSession -.-> HTTPClient\n    HTTPAlamofire -.-> HTTPClient\n\n    subgraph Networking Module\n        HTTPURLSession\n        URLSession\n        HTTPAlamofire\n        Alamofire\n    end\n\n    subgraph UI Module\n        ViewController\n        HTTPClient\n    end\n'})),(0,o.kt)("p",null,"That's the way you invert the dependencies from one module to another, and now you can easily switch between two concrete implementations of ",(0,o.kt)("inlineCode",{parentName:"p"},"HTTPClient")," from ",(0,o.kt)("em",{parentName:"p"},"Networking Module"),"."))}u.isMDXComponent=!0}}]);