"use strict";(self.webpackChunkailinykh_com=self.webpackChunkailinykh_com||[]).push([[2605],{5129:e=>{e.exports=JSON.parse('{"permalink":"/network-testing-with-url-protocol-stubbing","editUrl":"https://github.com/ailinykh/blog/edit/master/blog/2021-02-27-network-testing-with-url-protocol-stubbing.md","source":"@site/blog/2021-02-27-network-testing-with-url-protocol-stubbing.md","title":"Testing netwok requests with URLProtocol stubs","description":"Apple has a powerful URL Loading System which can be used in various ways with a bunch of most common URL schemes. It also includes the URLProtocol, a class that can intercept all network requests for different purposes. You can use it for analytics, testing, and even profiling your application.","date":"2021-02-27T00:00:00.000Z","tags":[{"inline":true,"label":"swift","permalink":"/tags/swift"},{"inline":true,"label":"URLProtocol","permalink":"/tags/url-protocol"},{"inline":true,"label":"testing","permalink":"/tags/testing"},{"inline":true,"label":"networking","permalink":"/tags/networking"},{"inline":true,"label":"ios","permalink":"/tags/ios"}],"readingTime":1.45,"hasTruncateMarker":true,"authors":[{"name":"Anton Ilinykh","title":"Software Engineer","imageURL":"https://avatars.githubusercontent.com/u/939390?s=400&v=4","key":"anton","page":null}],"frontMatter":{"slug":"network-testing-with-url-protocol-stubbing","title":"Testing netwok requests with URLProtocol stubs","authors":["anton"],"tags":["swift","URLProtocol","testing","networking","ios"]},"unlisted":false,"prevItem":{"title":"Homebrew package version downgrade","permalink":"/homebrew-formula-downgrade"},"nextItem":{"title":"Dependency Inversion Principle","permalink":"/dependency-inversion-principle"}}')},5573:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var o=n(5129),r=n(4848),s=n(8453);const i={slug:"network-testing-with-url-protocol-stubbing",title:"Testing netwok requests with URLProtocol stubs",authors:["anton"],tags:["swift","URLProtocol","testing","networking","ios"]},a=void 0,l={authorsImageUrls:[void 0]},c=[];function u(e){const t={a:"a",admonition:"admonition",code:"code",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(t.p,{children:["Apple has a powerful ",(0,r.jsx)(t.a,{href:"https://developer.apple.com/documentation/foundation/url_loading_system",children:"URL Loading System"})," which can be used in various ways with a bunch of most common URL schemes. It also includes the ",(0,r.jsx)(t.a,{href:"https://developer.apple.com/documentation/foundation/urlprotocol",children:"URLProtocol"}),", a class that can intercept all network requests for different purposes. You can use it for analytics, testing, and even profiling your application."]}),"\n",(0,r.jsxs)(t.p,{children:["All you need to do is to subclass the ",(0,r.jsx)(t.code,{children:"URLProtocol"})," and override nessesary methods."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-swift",children:'class URLProtocolStub: URLProtocol {\n    override class func canInit(with request: URLRequest) -> Bool {\n        guard let url = request.url, let host = url.host else { return false }\n            \n        return host.hasSuffix("example.com")\n    }\n\n    override class func canonicalRequest(for request: URLRequest) -> URLRequest {\n        return request\n    }\n}\n'})}),"\n",(0,r.jsxs)(t.p,{children:["After that you have to register it ",(0,r.jsx)(t.strong,{children:"before"})," any network request were made and also unregister if needed:"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-swift",children:"override func setUp() {\n    super.setUp()\n    \n    URLProtocol.registerClass(URLProtocolStub.self)\n}\n\noverride func tearDown() {\n    super.tearDown()\n    \n    URLProtocol.unregisterClass(URLProtocolStub.self)\n}\n"})}),"\n",(0,r.jsx)(t.p,{children:"And from now you can decide how to handle every single network request made within your application."}),"\n",(0,r.jsx)(t.p,{children:"For example you can stub a response before any paticular request will be executed and response immediately."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-swift",children:"class URLProtocolStub: URLProtocol {\n    enum URLResponseStub {\n        case failure(Error)\n        case success(Data)\n    }\n    \n    static var stubs = [URL: URLResponseStub]()\n    \n    override func startLoading() {\n        guard let url = request.url, let stub = URLProtocolStub.stubs[url] else { return }\n        \n        switch stub {\n        case .failure(let error):\n            client?.urlProtocol(self, didFailWithError: error)\n        case .success(let data):\n            client?.urlProtocol(self, didLoad: data)\n        }\n    }\n    override func stopLoading() {}\n}\n"})}),"\n",(0,r.jsx)(t.admonition,{type:"caution",children:(0,r.jsxs)(t.p,{children:["You have to implement ",(0,r.jsx)(t.code,{children:"stopLoading"})," method even if you don't need it"]})}),"\n",(0,r.jsx)(t.p,{children:"This approach gives you ability to mock any response you want just writing a fiew lines of code."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-swift",children:'let url = URL(string: "https://example.com")!\nlet error = NSError(domain: "", code: 0)\nURLProtocolStub.stubs[url] = .failure(error)\n'})}),"\n",(0,r.jsx)(t.p,{children:"Just make sure that the whole mock stuff happens before the actual network requests."})]})}function d(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>a});var o=n(6540);const r={},s=o.createContext(r);function i(e){const t=o.useContext(s);return o.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),o.createElement(s.Provider,{value:t},e.children)}}}]);