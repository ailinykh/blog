"use strict";(self.webpackChunkailinykh_com=self.webpackChunkailinykh_com||[]).push([[9450],{6029:function(e){e.exports=JSON.parse('{"blogPosts":[{"id":"mikrotik-ipsec-l2tp-bgp-routing","metadata":{"permalink":"/mikrotik-ipsec-l2tp-bgp-routing","editUrl":"https://github.com/ailinykh/blog/edit/master/blog/2025-02-14-mikrotik-ipsec.md","source":"@site/blog/2025-02-14-mikrotik-ipsec.md","title":"Mikrotik versus Roskomnadzor","description":"For research purposes, you may need to access certain resources from Roskomnadzor\u2019s blacklist, which may be restricted in your country.","date":"2025-02-14T00:00:00.000Z","formattedDate":"February 14, 2025","tags":[{"label":"mikrotik","permalink":"/tags/mikrotik"},{"label":"ipsec","permalink":"/tags/ipsec"},{"label":"l2tp","permalink":"/tags/l-2-tp"},{"label":"bgp","permalink":"/tags/bgp"},{"label":"dns","permalink":"/tags/dns"},{"label":"\u0440\u043e\u0441\u043a\u043e\u043c\u043d\u0430\u0434\u0437\u043e\u0440","permalink":"/tags/\u0440\u043e\u0441\u043a\u043e\u043c\u043d\u0430\u0434\u0437\u043e\u0440"},{"label":"\u043e\u0431\u0445\u043e\u0434 \u0431\u043b\u043e\u043a\u0438\u0440\u043e\u0432\u043e\u043a","permalink":"/tags/\u043e\u0431\u0445\u043e\u0434-\u0431\u043b\u043e\u043a\u0438\u0440\u043e\u0432\u043e\u043a"}],"readingTime":2.165,"hasTruncateMarker":true,"authors":[{"name":"Anton Ilinykh","imageURL":"https://avatars.githubusercontent.com/u/939390?s=400&v=4"}],"frontMatter":{"slug":"mikrotik-ipsec-l2tp-bgp-routing","title":"Mikrotik versus Roskomnadzor","author":"Anton Ilinykh","author_image_url":"https://avatars.githubusercontent.com/u/939390?s=400&v=4","tags":["mikrotik","ipsec","l2tp","bgp","dns","\u0440\u043e\u0441\u043a\u043e\u043c\u043d\u0430\u0434\u0437\u043e\u0440","\u043e\u0431\u0445\u043e\u0434 \u0431\u043b\u043e\u043a\u0438\u0440\u043e\u0432\u043e\u043a"]},"nextItem":{"title":"FFMPEG cheatsheet","permalink":"/ffmpeg-cheatsheet"}},"content":"For research purposes, you may need to access certain resources from [Roskomnadzor\u2019s blacklist](https://en.wikipedia.org/wiki/Internet_censorship_in_Russia#Internet_blacklist), which may be restricted in your country.\\n\\nThere are five small steps to bypass the blacklist using a MikroTik router and an IPsec/L2TP connection on a simple VPS running a Docker container.\\n\\n\x3c!--truncate--\x3e\\n\\n### Step I. Run IPSeC server\\n\\nThere are many ways to do this, but I prefer running a simple Docker container on your VPS. On your server, create a `compose.yml` file with the following content, replacing `YOUR_SHARED_SECRET` with a securely generated random password.\\n\\n```yaml\\nservices:\\n  ipsec:\\n    image: hwdsl2/ipsec-vpn-server\\n    restart: always\\n    environment:\\n      VPN_IPSEC_PSK: YOUR_SHARED_SECRET\\n      VPN_USER: mikrotik\\n      VPN_PASSWORD: mikrotik\\n    ports:\\n      - \\"500:500/udp\\"\\n      - \\"4500:4500/udp\\"\\n    privileged: true\\n    hostname: ipsec-vpn-server\\n    container_name: ipsec-vpn-server\\n```\\n\\nSave the file, then run `docker compose up -d` container and wait for the container to start.\\n\\n### Step II. L2TP client setup\\n\\nNext, retrieve your VPS hostname or IP address and create a new L2TP client on your MikroTik router using the following terminal command\\n\\n```shell\\n[admin@MikroTik] > interface l2tp-client add disabled=no name=l2tp-out connect-to=<YOUR_HOST_IP> user=mikrotik password=mikrotik use-ipsec=yes ipsec-secret=<YOUR_SHARED_SECRET>\\n[admin@MikroTik] > interface l2tp-client add name=l2tp-out connect-to=<YOUR_HOST_IP> user=mikrotik password=mikrotik use-ipsec=yes ipsec-secret=<YOUR_SHARED_SECRET>\\n```\\n\\nCheck it\'s working\\n\\n```shell\\n[admin@MikroTik] > ping github.com interface=l2tp-out\\n```\\n\\nIf you receive an ICMP response, it means everything is working perfectly\\n\\n### Step III. BGP configuration\\n\\nThere are several services, such as [antifilter.download](https://antifilter.download/) and [antifilter.network](https://antifilter.network/), that provide blacklisted routes from RKN. \\n\\nThese services can automatically configure your router via BGP, eliminating the need to update lists manually every day. \\n\\nTo set up BGP, visit [antifilter.network bgp page](https://antifilter.network/bgp) and obtain your `ASN`, `Router ID` (your IP address), and `Service IP`\\n\\nCreate template\\n\\n```shell\\n[admin@MikroTik] > /routing/bgp template add as=64999 disabled=no hold-time=4m input.filter=bgp_in .ignore-ad-path-len=yes keepalive-time=1m multihop=yes name=antifilter routing-table=main\\n```\\n\\n...and connection\\n\\n```shell\\n[admin@MikroTik] > /routing/bgp connection add disabled=no hold-time=4m input.filter=bgp_in .ignore-ad-path-len=yes keepalive=time=1m local.role=ebgp multihop=yes name=antifilter_bgp remote.address=51.75.66.20/32 .as=65444 router-id=<YOUR_IP_ADDRESS> routing-table=main templates=antifilter\\n```\\n\\nWait **around 5 minutes** and see if everything works\\n\\n```shell\\n[admin@MikroTik] > /routing/bgp/session print  \\nFlags: E - established \\n 0 E name=\\"antifilter_bgp-1\\" \\n     remote.address=45.148.244.55 .as=65444 .id=10.75.66.2 .capabilities=mp,rr,gr,as4,err,llgr .afi=ip,ipv6 .hold-time=4m \\n     .messages=11991 .bytes=1011967 .gr-time=120 .eor=ip \\n     local.address=192.168.88.1 .as=64999 .id=<YOUR_IP_ADDRESS> .cluster-id=<YOUR_IP_ADDRESS> .capabilities=mp,rr,gr,as4 .afi=ip \\n     .messages=4 .bytes=76 .eor=\\"\\" \\n     output.procid=20 \\n     input.procid=20 .filter=bgp_in .ignore-as-path-len=yes ebgp \\n     multihop=yes hold-time=4m keepalive-time=1m uptime=3m1s320ms last-started=2025-02-15 12:22:37 prefix-count=19725 \\n```\\n\\nAt the end of the output, you\'ll see the number of prefixes: `prefix-count=19725`\\n\\n## Step IV. Firewall configuration\\n\\nTo route traffic through the correct gateway, add the following rule to Mikrotik\'s firewall\\n\\n```shell\\n[admin@MikroTik] > /routing/filter/rule add chain=bgp_in disabled=no rule=\\"set gw l2tp-out; accept;\\"\\n```\\n\\n## Step V. DNS configuratoin (optional)\\n\\nTo avoid seeing unwanted ads, you can also use a DNS blocking service like [AdGuard DNS](https://adguard-dns.io/en/blog/adguard-dns-new-addresses.html):\\n\\n```shell\\n[admin@MikroTik] > /ip/dns set servers=94.140.14.14,94.140.15.15\\n```\\n\\nEnjoy!"},{"id":"ffmpeg-cheatsheet","metadata":{"permalink":"/ffmpeg-cheatsheet","editUrl":"https://github.com/ailinykh/blog/edit/master/blog/2023-05-27-ffmpeg-cheatsheet.md","source":"@site/blog/2023-05-27-ffmpeg-cheatsheet.md","title":"FFMPEG cheatsheet","description":"Here you can find some usefull tips of using ffmpeg library","date":"2023-05-27T00:00:00.000Z","formattedDate":"May 27, 2023","tags":[{"label":"ffmpeg","permalink":"/tags/ffmpeg"},{"label":"cheatsheet","permalink":"/tags/cheatsheet"}],"readingTime":1.405,"hasTruncateMarker":true,"authors":[{"name":"Anton Ilinykh","imageURL":"https://avatars.githubusercontent.com/u/939390?s=400&v=4"}],"frontMatter":{"slug":"ffmpeg-cheatsheet","title":"FFMPEG cheatsheet","author":"Anton Ilinykh","author_image_url":"https://avatars.githubusercontent.com/u/939390?s=400&v=4","tags":["ffmpeg","cheatsheet"]},"prevItem":{"title":"Mikrotik versus Roskomnadzor","permalink":"/mikrotik-ipsec-l2tp-bgp-routing"},"nextItem":{"title":"Homebrew package version downgrade","permalink":"/homebrew-formula-downgrade"}},"content":"Here you can find some usefull tips of using ffmpeg library\\n\\n\x3c!--truncate--\x3e\\n\\n::::tip a sample video file to play with\\n\\n```\\ncurl -o input.mp4 https://www.w3schools.com/html/mov_bbb.mp4\\n```\\n\\n::::\\n\\n### Show detailed information about video file\\n\\nthe `ffprobe` works with _images_ as well\\n\\n```bash\\nffprobe -v error -of json -show_streams -show_format input.mp4\\n```\\n\\n### Resize to desired width/height\\n\\n- explicit size: `scale=640:480`\\n- resize only by width: `scale=640:-1`\\n- resize only by height: `scale=-1:480`\\n- to make a thumbnail just specify `output.jpg` as output file\\n\\n```bash\\nffmpeg -v error -y -i input.mp4 -ss 00:00:01.000 -vframes 1 \\\\\\n    -filter:v scale=320:-1 output.mp4\\n```\\n\\n### Split video by size\\n\\n- split video by 50MB\\n- specify offset as `-ss 00:10:00`\\n\\n```bash\\nffmpeg -v error -y -i input.mp4 -fs 50000000 output.mp4\\n```\\n\\n### Use -map_metadata to keep `id3` tags\\n\\n```bash\\nffmpeg -i input.mp4 -map 1 -c copy output.mp4\\n```\\n\\n- copy global metadata\\n\\n```bash\\nffmpeg -i input.mp4 -map_metadata 0 -c copy output.mp4\\n```\\n\\n- copy video stream metadata only\\n\\n```bash\\nffmpeg -i input.mp4 -map_metadata:s:v 0:s:v -c copy output.mp4\\n```\\n\\n- copy audio stream metadata only\\n\\n```bash\\nffmpeg -i input.mp4 -map_metadata:s:a 0:s:a -c copy output.mp4\\n```\\n\\n### Convert to 1080p\\n\\n```bash\\nffmpeg -v error -stats -i input.mp4 -map_metadata 0:g -s hd1080 \\\\\\n    -c:v libx264 -crf 23 -c:a aac -strict -2 output.mp4\\n```\\n\\n### Convert video to .gif\\n\\n```bash\\nffmpeg -v error -stats -i input.mp4 -y \\\\\\n    -vf fps=10,scale=640:-1:flags=lanczos,palettegen palette.png\\n\\nffmpeg -v error -stats -i input.mp4 -i palette.png -filter_complex \\\\\\n    \\"fps=10,scale=640:-1:flags=lanczos[x];[x][1:v]paletteuse\\" output.gif\\n\\nrm palette.png\\n```\\n\\n### Rotate video\\n\\n- 0 = 90CounterCLockwise and Vertical Flip (default)\\n- 1 = 90Clockwise\\n- 2 = 90CounterClockwise\\n- 3 = 90Clockwise and Vertical Flip\\n\\n```bash\\nffmpeg -i input.mp4 -vf \\"transpose=1\\" output.mp4\\n```"},{"id":"homebrew-formula-downgrade","metadata":{"permalink":"/homebrew-formula-downgrade","editUrl":"https://github.com/ailinykh/blog/edit/master/blog/2021-10-23-homebrew-formula-downgrade.md","source":"@site/blog/2021-10-23-homebrew-formula-downgrade.md","title":"Homebrew package version downgrade","description":"Nowadays rollback to any particular version of the Homebrew package might be tricky since the commands brew versions  and brew switch   are deprecated and no more available.","date":"2021-10-23T00:00:00.000Z","formattedDate":"October 23, 2021","tags":[{"label":"homebrew","permalink":"/tags/homebrew"},{"label":"package","permalink":"/tags/package"},{"label":"formula","permalink":"/tags/formula"},{"label":"rollback","permalink":"/tags/rollback"},{"label":"guide","permalink":"/tags/guide"}],"readingTime":2.45,"hasTruncateMarker":true,"authors":[{"name":"Anton Ilinykh","imageURL":"https://avatars.githubusercontent.com/u/939390?s=400&v=4"}],"frontMatter":{"slug":"homebrew-formula-downgrade","title":"Homebrew package version downgrade","author":"Anton Ilinykh","author_image_url":"https://avatars.githubusercontent.com/u/939390?s=400&v=4","tags":["homebrew","package","formula","rollback","guide"]},"prevItem":{"title":"FFMPEG cheatsheet","permalink":"/ffmpeg-cheatsheet"},"nextItem":{"title":"Testing netwok requests with URLProtocol stubs","permalink":"/network-testing-with-url-protocol-stubbing"}},"content":"Nowadays rollback to any particular version of the Homebrew package might be tricky since the commands `brew versions <package>` and `brew switch <package> <version>` are deprecated and no more available.\\n\\n\x3c!--truncate--\x3e\\n\\nFirst, you should check if any other versions are available for your package:\\n```bash\\nadmin@macos ~ % brew search python\\n==> Formulae\\napp-engine-python          python-launcher            python@3.8\\nboost-python               python-markdown            python@3.9 \u2714\\nboost-python3              python-tabulate            reorder-python-imports\\nbpython                    python-tk@3.10             wxpython\\ngst-python                 python-tk@3.9              pythran\\nipython                    python-yq                  jython\\nmicropython                python@3.10                cython\\nptpython                   python@3.7\\n==> Casks\\nawips-python                             mysql-connector-python\\n\\nIf you meant \\"python\\" specifically:\\nIt was migrated from homebrew/cask to homebrew/core.\\n```\\nif so, the necessary version could be installed right from the repo:\\n```bash\\nadmin@macos ~ % brew install python@3.10\\nadmin@macos ~ % brew link python@3.10\\nadmin@macos ~ % python3 --version                                                               \\nPython 3.10.0\\n\\nadmin@macos ~ % \\n```\\nif not, there are two more ways to achieve that.\\n\\n## Install using remote tap\\nYou should find the correct Formula file at github.com\\n\\nLet\'s say you are trying to downgrade the `git-lfs` package. In this case, you should follow these steps:\\n1. Go to https://github.com/Homebrew/homebrew-core/blob/HEAD/Formula/git-lfs.rb\\n2. In the top right corner find the __History__ button\\n3. Find commit with the version you need\\n4. Choose __View file__ from the menu\\n5. Click __Raw__ button\\n6. That is it! You\'ve got the Url: https://raw.githubusercontent.com/Homebrew/homebrew-core/43842898fd3ff43273466052722f5ba2789196cb/Formula/git-lfs.rb\\n\\nor just by using `git log git-lfs` command:\\n```bash {19}\\nadmin@macos ~ % brew log git-lfs\\ncommit be2109eae9e1043ddb78e593a8a05d568917ca95\\nAuthor: BrewTestBot <1589480+BrewTestBot@users.noreply.github.com>\\nDate:   Wed Sep 29 02:14:15 2021 +0000\\n\\n    git-lfs: update 3.0.1 bottle.\\n\\ncommit 1c4607366f2c5d85c2efa803556f51a6709987f0\\nAuthor: Rui Chen <rui@chenrui.dev>\\nDate:   Tue Sep 28 18:48:26 2021 -0400\\n\\n    git-lfs 3.0.1\\n    \\n    Closes #86082.\\n    \\n    Signed-off-by: Thierry Moisan <thierry.moisan@gmail.com>\\n    Signed-off-by: BrewTestBot <1589480+BrewTestBot@users.noreply.github.com>\\n\\ncommit 43842898fd3ff43273466052722f5ba2789196cb\\nAuthor: Michael Cho <20700669+cho-m@users.noreply.github.com>\\nDate:   Wed Jul 7 01:55:56 2021 +0000\\n\\n    git-lfs: update 2.13.3 bottle.\\n```\\nhere is the 2.13.3 version commit hash `43842898fd3ff43273466052722f5ba2789196cb` and it can be put info __raw__ GitHub url:\\n```bash\\nhttps://raw.githubusercontent.com/Homebrew/homebrew-core/<COMMIT ID>/Formula/git-lfs.rb\\n```\\n:::note\\nIn different guides across the internet you may see the following command:\\n```bash\\nadmin@macos ~ % brew install <url>\\n```\\nIt\'s also [__deprecated__](https://brew.sh/2020/05/29/homebrew-2.3.0/#:~:text=brew%20install%20from%20a%20URL,beginning%20installation%20or%20locking%20dependencies.) and __not working__ anymore\\n:::\\n\\nNow all you need is to put this file into your own \\"tap\\" (repository) on a GitHub and install it using homebrew:\\n```bash\\nadmin@macos ~ % brew unlink git-lfs\\nadmin@macos ~ % brew install <user>/<repo>/git-lfs\\n```\\n## Install using local tap and brew extract\\nAnother way is to create a local tap and then `extract` the needed version into it:\\n```bash\\nadmin@macos ~ % brew tap-new $USER/local-git-lfs\\nInitialized empty Git repository in /usr/local/Homebrew/Library/Taps/admin/homebrew-local-git-lfs/.git/\\n```\\nthis one creates a new local tap inside your local Homebrew repo.\\n:::note\\nUse `brew --repository` command to find Homebrew\'s root location\\n:::\\nAfter that you can `extract` the correct version into this new tap\\n```bash\\nadmin@macos ~ % brew extract --version 2.13.3 git-lfs $USER/local-git-lfs\\n```\\nand the last step is to install this version as usual:\\n```bash\\nadmin@macos ~ % brew unlink git-lfs # in case of another version installed\\nadmin@macos ~ % brew install git-lfs@2.13.3\\n```"},{"id":"network-testing-with-url-protocol-stubbing","metadata":{"permalink":"/network-testing-with-url-protocol-stubbing","editUrl":"https://github.com/ailinykh/blog/edit/master/blog/2021-02-27-network-testing-with-url-protocol-stubbing.md","source":"@site/blog/2021-02-27-network-testing-with-url-protocol-stubbing.md","title":"Testing netwok requests with URLProtocol stubs","description":"Apple has a powerful URL Loading System which can be used in various ways with a bunch of most common URL schemes. It also includes the URLProtocol, a class that can intercept all network requests for different purposes. You can use it for analytics, testing, and even profiling your application.","date":"2021-02-27T00:00:00.000Z","formattedDate":"February 27, 2021","tags":[{"label":"swift","permalink":"/tags/swift"},{"label":"URLProtocol","permalink":"/tags/url-protocol"},{"label":"testing","permalink":"/tags/testing"},{"label":"networking","permalink":"/tags/networking"},{"label":"ios","permalink":"/tags/ios"}],"readingTime":1.5,"hasTruncateMarker":true,"authors":[{"name":"Anton Ilinykh","imageURL":"https://avatars.githubusercontent.com/u/939390?s=400&v=4"}],"frontMatter":{"slug":"network-testing-with-url-protocol-stubbing","title":"Testing netwok requests with URLProtocol stubs","author":"Anton Ilinykh","author_image_url":"https://avatars.githubusercontent.com/u/939390?s=400&v=4","tags":["swift","URLProtocol","testing","networking","ios"]},"prevItem":{"title":"Homebrew package version downgrade","permalink":"/homebrew-formula-downgrade"},"nextItem":{"title":"Dependency Inversion Principle","permalink":"/dependency-inversion-principle"}},"content":"Apple has a powerful [URL Loading System](https://developer.apple.com/documentation/foundation/url_loading_system) which can be used in various ways with a bunch of most common URL schemes. It also includes the [URLProtocol](https://developer.apple.com/documentation/foundation/urlprotocol), a class that can intercept all network requests for different purposes. You can use it for analytics, testing, and even profiling your application.\\n\x3c!--truncate--\x3e\\nAll you need to do is to subclass the `URLProtocol` and override nessesary methods.\\n```swift\\nclass URLProtocolStub: URLProtocol {\\n    override class func canInit(with request: URLRequest) -> Bool {\\n        guard let url = request.url, let host = url.host else { return false }\\n            \\n        return host.hasSuffix(\\"example.com\\")\\n    }\\n\\n    override class func canonicalRequest(for request: URLRequest) -> URLRequest {\\n        return request\\n    }\\n}\\n```\\nAfter that you have to register it __before__ any network request were made and also unregister if needed:\\n```swift\\noverride func setUp() {\\n    super.setUp()\\n    \\n    URLProtocol.registerClass(URLProtocolStub.self)\\n}\\n\\noverride func tearDown() {\\n    super.tearDown()\\n    \\n    URLProtocol.unregisterClass(URLProtocolStub.self)\\n}\\n```\\nAnd from now you can decide how to handle every single network request made within your application. \\n\\nFor example you can stub a response before any paticular request will be executed and response immediately.\\n```swift\\nclass URLProtocolStub: URLProtocol {\\n    enum URLResponseStub {\\n        case failure(Error)\\n        case success(Data)\\n    }\\n    \\n    static var stubs = [URL: URLResponseStub]()\\n    \\n    override func startLoading() {\\n        guard let url = request.url, let stub = URLProtocolStub.stubs[url] else { return }\\n        \\n        switch stub {\\n        case .failure(let error):\\n            client?.urlProtocol(self, didFailWithError: error)\\n        case .success(let data):\\n            client?.urlProtocol(self, didLoad: data)\\n        }\\n    }\\n    override func stopLoading() {}\\n}\\n```\\n:::caution\\nYou have to implement `stopLoading` method even if you don\'t need it\\n:::\\n\\nThis approach gives you ability to mock any response you want just writing a fiew lines of code.\\n```swift\\nlet url = URL(string: \\"https://example.com\\")!\\nlet error = NSError(domain: \\"\\", code: 0)\\nURLProtocolStub.stubs[url] = .failure(error)\\n```\\n\\nJust make sure that the whole mock stuff happens before the actual network requests."},{"id":"dependency-inversion-principle","metadata":{"permalink":"/dependency-inversion-principle","editUrl":"https://github.com/ailinykh/blog/edit/master/blog/2021-02-16-dependency-inversion-principle.md","source":"@site/blog/2021-02-16-dependency-inversion-principle.md","title":"Dependency Inversion Principle","description":"The Dependency Inversion Principle is the last one from SOLID stands for decoupling the system into independent modules. It means that one part of a system should not depend on another one directly.","date":"2021-02-16T00:00:00.000Z","formattedDate":"February 16, 2021","tags":[{"label":"swift","permalink":"/tags/swift"},{"label":"SOLID","permalink":"/tags/solid"},{"label":"dependency inversion","permalink":"/tags/dependency-inversion"},{"label":"architecture","permalink":"/tags/architecture"},{"label":"ios","permalink":"/tags/ios"}],"readingTime":2.16,"hasTruncateMarker":true,"authors":[{"name":"Anton Ilinykh","imageURL":"https://avatars.githubusercontent.com/u/939390?s=400&v=4"}],"frontMatter":{"slug":"dependency-inversion-principle","title":"Dependency Inversion Principle","author":"Anton Ilinykh","author_image_url":"https://avatars.githubusercontent.com/u/939390?s=400&v=4","tags":["swift","SOLID","dependency inversion","architecture","ios"]},"prevItem":{"title":"Testing netwok requests with URLProtocol stubs","permalink":"/network-testing-with-url-protocol-stubbing"}},"content":"The Dependency Inversion Principle is the last one from [SOLID](https://en.wikipedia.org/wiki/SOLID) stands for decoupling the system into independent modules. It means that one part of a system should not depend on another one directly.\\n\\nLet\'s see an example.\\n\\n\x3c!--truncate--\x3e\\n\\nOn the one hand, we have a `ViewController` which is the part of _UI/Presentation Module_, and on the other hand, we have some data source which can be a part of _Networking/Persistence Module_. Let\'s say it is an `URLSession` object.\\n\\n```swift\\nclass ViewController: UIViewController {\\n\\n    override func viewDidLoad() {\\n        super.viewDidLoad()\\n\\n        URLSession.shared.dataTask(with: url) { data, response, error in\\n            // Do something with response\\n        }.resume()\\n    }\\n\\n}\\n```\\n\\n<br/>\\n\\nThis code can be represented by a diagram\\n\\n<div style={{textAlign: \'center\'}}>\\n\\n```mermaid\\nflowchart LR\\n    ViewController --\x3e URLSession\\n\\n    subgraph UI Module\\n        ViewController\\n    end\\n\\n    subgraph Networking Module\\n        URLSession\\n    end\\n\\n```\\n\\n</div>\\n\\nThe `UIViewController` depends on `URLSession` concrete implementation. And it means that `URLSession` **can\'t** be replaced with another _Network_ client such as [Alamofire](https://github.com/Alamofire/Alamofire) without changing the _Presentation Module_.\\n\\n## Solution\\n\\nThis problem can be solved with Dependency Inversion just by adding another abstraction between concrete implementations. Some `protocol` that can live in _Presentation Module_ and the _Network Module_ can conform to it.\\n\\n<div style={{textAlign: \'center\'}}>\\n\\n```mermaid\\nflowchart LR\\n    ViewController --\x3e HTTPClient[\\"&lt;HTTPClient&gt;\\"]\\n    URLSession -.-> HTTPClient\\n\\n    subgraph UI Module\\n        ViewController\\n        HTTPClient\\n    end\\n\\n    subgraph Networking Module\\n        URLSession\\n    end\\n\\n```\\n\\n</div>\\n\\nand the code above will transform to\\n\\n```swift\\nprotocol HTTPClient {\\n    func load(url: URL, completion: @escaping (Data?, URLResponse?, Error?) -> Void)\\n}\\n\\nclass ViewController: UIViewController {\\n\\n    var client: HTTPClient!\\n\\n    override func viewDidLoad() {\\n        super.viewDidLoad()\\n\\n        client.load(url: url) { (data, response, error) in\\n            // Do something\\n        }\\n    }\\n}\\n```\\n\\nNow you can have two separate implementations of `HTTPClient` protocol, and they both can live in _Network Module_\\n\\n<div style={{textAlign: \'center\'}}>\\n\\n```mermaid\\nflowchart LR\\n    ViewController --\x3e HTTPClient[\\"&lt;HTTPClient&gt;\\"]\\n    HTTPURLSession --\x3e URLSession\\n    HTTPAlamofire --\x3e Alamofire\\n    HTTPURLSession -.-> HTTPClient\\n    HTTPAlamofire -.-> HTTPClient\\n\\n    subgraph Networking Module\\n        HTTPURLSession\\n        URLSession\\n        HTTPAlamofire\\n        Alamofire\\n    end\\n\\n    subgraph UI Module\\n        ViewController\\n        HTTPClient\\n    end\\n\\n```\\n\\n</div>\\n\\nThat\'s the way you invert the dependencies from one module to another, and now you can easily switch between two concrete implementations of `HTTPClient` from _Networking Module_.\\n\\n\x3c!-- so the protocol conformance can be achieved via extension:\\n\\n```swift\\nextension URLSession: HTTPClient {\\n    func load(url: URL, completion: @escaping  (Data?, URLResponse?, Error?) -> Void) {\\n        dataTask(with: url, completionHandler: completion).resume()\\n    }\\n}\\n```\\n\\nor just by inheritance:\\n\\n```swift\\nclass HTTPURLSession: URLSession, HTTPClient {\\n    func load(url: URL, completion: @escaping (Data?, URLResponse?, Error?) -> Void) {\\n        dataTask(with: url, completionHandler: completion)\\n    }\\n}\\n```\\nThe second way is preferred cause it excludes any conflicts with future `URLSession` methods which can be introduced by Apple. --\x3e"}]}')}}]);